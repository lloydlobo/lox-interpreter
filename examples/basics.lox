// test.lox
// This executes a return statement, but it’s not even inside a function at
// all. It’s top-level code. I don’t know what the user thinks is going to
// happen, but I don’t think we want Lox to allow this.
//
// We can extend the resolver to detect this statically. Much like we track
// scopes as we walk the tree, we can track whether or not the code we are
// currently visiting is inside a function declaration.
//    return "at top level";

// FIXME:
// thread 499140 panic: integer overflow
// resolver.zig:143:25: 0x10d5169 in resolveLocal (main)
//     while (i >= 0) : (i -= 1) {
//                         ^
// resolver.zig:275:34: 0x10b1652 in resolveExpr (main)
//             try self.resolveLocal(expr, variable);
//                                  ^
// resolver.zig:207:33: 0x1072ad1 in resolveStatement (main)
//             try self.resolveExpr(print_stmt);
//                                 ^
// resolver.zig:172:25: 0x1063b3d in resolveStatements (main)
//         resolveStatement(self, stmt) catch |err| {
// 
// // print "Functions - Return Statement";
// // fun hello() {
// //     print hello;
// //     var out = "hello(): from lox, ( return out )";
// //     return out;
// // }
// // print hello;
// // var ret = hello();
// // print ret;
// // print hello;

if (true) {
    print "Functions - Return Statement";
    fun hello() {
        print hello;
        var out = "hello(): from lox, ( return out )";
        return out;
    }
    print hello;
    var ret = hello();
    print ret;
    print hello;
    // hello();
}

if (true) {
    print "Functions - Closures";
    fun makeCounter() {
        var i = 0;
        fun count() {
            i = i + 1; // Error in function context: 'count': Undefined variable 'i'.
            print i;   // [line 23]
        }

        return count;
    }
    var counter = makeCounter();
    counter(); // "1".
    counter(); // "2".
}


if (true) {
    fun hello() {
        print hello;
        var out = "hello(): from lox, ( return out )";
        return out;
    }

    print("# Functions");

    fun foo() {
        var res = hello();


        if (res == nil) {
            print "foo(): ''"; // nil
        } else {
            var str = "foo(): '" + res + "'";
            print str;
        }
        return 0;
    }

    fun say_hi(first, last) {
        print "Hi, " + first + " " + last + "!";
    }

    // FIXME: the block is evaluated before call. e.g. `print say_hi` is
    //   Seems like interpreter does not respect order, due to recursively
    //   calling as it reaches the end, maybe call-order should be looked
    //   into. (also clock could help) printed later
    if (false){
        print hello; // <fn hello>
        print foo; // <fn foo>
        print say_hi; // <fn say_hi>
        foo();
        say_hi("Dear", "Reader");
    } else{
        hello(); // <fn hello>
    }
}


if (false) {
    print("# For Loops");

    // Print the first n elements in the Fibonacci sequence
    var a = 0;
    var iterations = 8; // e.g. 21 elements in 10000 iterations
    var temp;
    for (var b = 1; a < iterations; b = temp + b) {
        print a;
        temp = a;
        a = b;

        var is_implemented = false;
        if (is_implemented) {
            if (b > 29) {
                print "break inside fibonacci sequence";
                // break; // Unimplemented
            }
        }
    }
}


if (false) {
    print("# While Loops");

    var counter = 0;
    while (counter < 4) {
        print counter;
        counter = counter + 1;
    }
}

if (false) {
    print("# Logical Operators");

    var logical = (1 or 2);
    print logical; // 1
    print "hi" or 2; // hi
    print 0 or 2; // 0
    print nil or 2; // 2
    print nil and 2; // nil
    print true and false; // false
    print true and (1==2); // false
    print !(1 == 2) and !(3 == 4); // true
}


if (true) {
    print("# Conditional execution");

    if (true) {
        print "1122" ;
    }

    if (2 == 3) {
        print "inside if statement 1" ;
        print "inside if statement 2" ;
    } else {
        print("inside else statement 1");
        if (1 == 1) {
            print "inside else inside if statement a" ;
            print "inside else inside if statement b" ;
        }
    }
}

if (false) {
    print("# Parse expression");

    var _ = (100 + (1111 * 2)); // discarded
    var foo = "before";
    print foo;
    var foo = "after";
    print foo;

    var baz = "before";
    print baz;
    var baz = "after";
    print baz;

    var quz = 73 + 26 * 20;
    print quz;
    var hello = 26 * 20;
    print quz + hello;
    var foo;
    print foo;
}

if (false) {
    print("# Scopes - 1/3");

    {
        var a = "first";
        print a; // "first".
    }

    {
        var a = "second";
        print a; // "second".
    }


    print("# Scopes - 2/3");

    var bar = "global bar";
    var world = "global world";
    var hello = "global hello";
    {
        var bar = "outer bar";
        var world = "outer world";
        {
            var bar = "inner bar";
            print bar;
            print world;
            print hello;
        }
        print bar;
        print world;
        print hello;
    }
    print bar;
    print world;
    print hello;

    print("# Scopes - 3/3");

    var baz = (91 * 16) - 61;
    {
        var world = "quz" + "89";
        print world;
    }
    print baz;

}


if (false) {
    print("# Block Syntax");

    {
        var hello = 88;
        {
            var foo = 88;
            print foo;
        }
        print hello;
    }
}

// see `:h modeline`
// vim: set sts=4 sw=4 et :
// vim: set filetype=c :
// vim: set commentstring=//\ %s :
